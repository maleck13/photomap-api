{
  "name": "object-emitter",
  "version": "0.1.3",
  "description": "EventEmitter with some useful additional functionality.",
  "author": {
    "name": "Usability Dynamics",
    "email": "info@usabilitydynamics.com",
    "url": "http://usabilitydynamics.com"
  },
  "main": "lib/object-emitter.js",
  "contributors": [
    {
      "name": "Andy Potanin",
      "email": "andy.potanin@usabilitydynamics.com",
      "url": "http://usabilitydynamics.com"
    },
    {
      "name": "Ivan McCarthy",
      "email": "ivan.mccarthy@usabilitydynamics.com",
      "url": "http://usabilitydynamics.com"
    }
  ],
  "keywords": [
    "object",
    "emitter",
    "workflow",
    "activity",
    "viewmodel",
    "events",
    "watch",
    "observe",
    "harmony"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/UsabilityDynamics/node-object-emitter.git"
  },
  "bugs": {
    "url": "https://github.com/UsabilityDynamics/node-object-emitter/issues"
  },
  "dependencies": {
    "abstract": "0.1.2"
  },
  "devDependencies": {
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-less": "~0.8.1",
    "grunt-contrib-symlink": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-contrib-yuidoc": "~0.5.0",
    "grunt-jscoverage": "~0.0.3",
    "grunt-markdown": "~0.4.0",
    "grunt-mocha-cli": "~1.3.0",
    "grunt-shell": "~0.5.0",
    "object-settings": "^0.2.0",
    "should": "*"
  },
  "scripts": {
    "test": "mocha test --ui exports --reporter list"
  },
  "readmeFilename": "readme.md",
  "readme": "## Overview\nObject Emitter adds Event Emitter functionality to an object, creates a new emitter, or can be used to override an existing object's emitter methods.\nThis is similar to the awesome EventEmitter2 module since there is wildcard support.\n\n* Convenience \"mixin\" method for easily adding Emitter to any object.\n* All module methods (on, emit, off, etc) are chainable.\n* Wildcard matching enabled by default.\n* Extends existing EventEmitters by working with the _events property.\n* Recognizes Node.js domain usage.\n* Allows default \"error\" callback to avoid throwing \"unspecified 'error' event\" error.\n\n## Constructor Methods\n\n - create: Create a new instance of Object Emitter.\n - mixin: Add Object Emitter properties into a target object, never overwriting any existing properties.\n - inject: Force-add Object Emitter properties into the target, overwriting any existing properties if necessary.\n\n## Basic Usage\nCreate new instance of Object Emitter.\n\n```javascript\nvar _emitter = require( 'object-emitter' ).create({\n  delimiter: ':',\n  throwErrors: false\n});\n\n_emitter\n  .on( '*:two', console.log )\n  .emit( 'ping:one', 'I am ignored.' );\n  .emit( 'ping:two', 'I am not ignored!' );\n```\n\nAdd Object Emitter to a new object.\n\n```javascript\nvar MyObject = {};\n\nrequire( 'object-emitter' ).mixin( MyObject );    \n\nMyObject\n  .on( 'ping', console.log )\n  .emit( 'ping', 'Chaining works!' );\n```\n    \nExtend existing EventEmitter object and utilize wildcards.\n\n```javascript\nrequire( 'object-emitter' ).mixin( process );    \nprocess.on( '*.ping', console.log );\nprocess.emit( 'ding', 'I am ignored.' );\nprocess.emit( 'ding.ping', 'I am not ignored!' );\n```\n\nThe semi \"traditional\" way of injecting prototypes into new objects works like so:\n\n```javascript\nvar ObjectEmitter = require('object-emitter');\n\nfunction MyConstructor( options ) {\n\n  ObjectEmitter.call(this, {\n    delimiter: ':',\n    throwErrors: false\n  });\n\n  return this;\n\n};\n\nMyConstructor.prototype = Object.create( ObjectEmitter.prototype, {\n  constructor: { value: MyConstructor }\n});\n\nMyConstructor.prototype.someMethod = function() {}\n\n```\n\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013-2014 Usability Dynamics, Inc. <info@usabilitydynamics.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "homepage": "https://github.com/UsabilityDynamics/node-object-emitter",
  "_id": "object-emitter@0.1.3",
  "_from": "object-emitter@>=0.0.4"
}
